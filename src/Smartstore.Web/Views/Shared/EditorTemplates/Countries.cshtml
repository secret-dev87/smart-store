@using System.Globalization
@using Microsoft.EntityFrameworkCore
@using Smartstore.Utilities

@functions
{
    private object SelectedKeys
    {
        get
        {
            var model = GetMetadata<object>("model") ?? ViewData.Model;

            if (model is int[] ids)
            {
                return ids;
            }
            else if (model is string[] codes)
            {
                return codes;
            }
            else if (model != null)
            {
                if (ConvertUtility.TryConvert<string>(model, CultureInfo.InvariantCulture, out string str) && str.HasValue())
                {
                    if (char.IsNumber(str[0]))
                    {
                        return str.ToIntArray();
                    }
                    else
                    {
                        return str.Convert<string[]>(Array.Empty<string>()).Select(x => x.Trim()).ToArray();
                    }
                }
            }

            return Array.Empty<int>();
        }
    }

    private bool SelectByIsoCode
    {
        get => ViewData.Model is string[] || ViewData.Model is string;
    }

    private bool IsNullable
    {
        get
        {
            if (TryGetMetadata<bool>("nullable", out var nullable))
            {
                return nullable;
            }

            return ViewData.ModelMetadata.ModelType != typeof(int);
        }
    }

    private bool IncludeHidden
    {
        get => !TryGetMetadata<bool>("includeHidden", out var includeHidden) || includeHidden == true;
    }

    private bool ShippingCountriesOnly
    {
        get => TryGetMetadata<bool>("shippingCountriesOnly", out var shippingCountriesOnly) && shippingCountriesOnly == true;
    }

    private int StoreId
    {
        get => GetMetadata<int>("storeId", 0);
    }

    private string Placeholder
    {
        get => GetMetadata<string>("placeholder") ?? T("Common.Unspecified").Value;
    }

    private bool HasSpecificPlaceholder
    {
        get => HasMetadata("placeholder");
    }
}

@{
    var items = GetMetadata<IList<CountrySelectListItem>>("items");
    if (items == null)
    {
        var query = CommonServices.DbContext.Countries
            .AsNoTracking()
            .ApplyStandardFilter(IncludeHidden, StoreId, false);

        if (ShippingCountriesOnly)
        {
            query = query.Where(x => x.AllowsShipping);
        }

        var countries = await query.ToListAsync();

        var keys = SelectedKeys;
        var selectByIso = SelectByIsoCode;
        items = (keys is int[] ids ? countries.ToSelectListItems(ids) : countries.ToSelectListItems((string[])keys));
    }

    var flagsPath = Url.Content("~/images/flags/");
    var attributes = new AttributeDictionary().Merge(ConvertUtility.ObjectToDictionary(ViewData["htmlAttributes"] ?? new object()));

    if (!attributes.ContainsKey("multiple"))
    {
        var multiple = GetMetadata<bool>("multiple", false);
        if (multiple)
        {
            attributes["multiple"] = "multiple";
        }
    }
}
<select asp-for="@Model"
        attr-data-placeholder='(IsNullable, Placeholder)'
        attrs="attributes"
        class="edit-control"
        data-editor="select">
    @if (HasSpecificPlaceholder) 
    {
        <option value="">@Placeholder</option>
    }
    @foreach (var item in items)
    {
        <option value="@item.Value"
                attr-selected='(item.Selected, "selected")'
                data-imageurl="@Url.Content(flagsPath + item.TwoLetterIsoCode + ".png")">
            @item.Text
        </option>
    }
</select>